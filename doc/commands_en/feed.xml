<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Commands_en on Hugo中文文档</title>
    <link>https://www.gohugo.org/doc/commands_en/</link>
    <description>Recent content in Commands_en on Hugo中文文档</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright © &lt;a href=&#34;https://blog.coderzh.com/&#34;&gt;CoderZh&lt;/a&gt; 2015.</copyright>
    <lastBuildDate>Wed, 25 Nov 2015 23:10:39 +0100</lastBuildDate>
    
	<atom:link href="https://www.gohugo.org/doc/commands_en/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>hugo</title>
      <link>https://www.gohugo.org/doc/commands/hugo_en/</link>
      <pubDate>Wed, 25 Nov 2015 23:10:39 +0100</pubDate>
      
      <guid>https://www.gohugo.org/doc/commands/hugo_en/</guid>
      <description>hugo hugo builds your site
Synopsis hugo is the main command, used to build your Hugo site.
Hugo is a Fast and Flexible Static Site Generator built with love by spf13 and friends in Go.
Complete documentation is available at http://gohugo.io/.
hugo  Options  -b, --baseURL=&amp;quot;&amp;quot;: hostname (and path) to the root, e.g. http://spf13.com/ -D, --buildDrafts[=false]: include content marked as draft -F, --buildFuture[=false]: include content with publishdate in the future --cacheDir=&amp;quot;&amp;quot;: filesystem path to cache directory.</description>
    </item>
    
    <item>
      <title>hugo benchmark</title>
      <link>https://www.gohugo.org/doc/commands/hugo_benchmark/</link>
      <pubDate>Wed, 25 Nov 2015 23:10:39 +0100</pubDate>
      
      <guid>https://www.gohugo.org/doc/commands/hugo_benchmark/</guid>
      <description>hugo benchmark Benchmark hugo by building a site a number of times.
Synopsis Hugo can build a site many times over and analyze the running process creating a benchmark.
hugo benchmark  Options  -n, --count=13: number of times to build the site --cpuprofile=&amp;quot;&amp;quot;: path/filename for the CPU profile file --memprofile=&amp;quot;&amp;quot;: path/filename for the memory profile file  Options inherited from parent commands  -b, --baseURL=&amp;quot;&amp;quot;: hostname (and path) to the root, e.</description>
    </item>
    
    <item>
      <title>hugo check</title>
      <link>https://www.gohugo.org/doc/commands/hugo_check/</link>
      <pubDate>Wed, 25 Nov 2015 23:10:39 +0100</pubDate>
      
      <guid>https://www.gohugo.org/doc/commands/hugo_check/</guid>
      <description>hugo check Check content in the source directory
Synopsis Hugo will perform some basic analysis on the content provided and will give feedback.
hugo check  Options inherited from parent commands  -b, --baseURL=&amp;quot;&amp;quot;: hostname (and path) to the root, e.g. http://spf13.com/ -D, --buildDrafts[=false]: include content marked as draft -F, --buildFuture[=false]: include content with publishdate in the future --cacheDir=&amp;quot;&amp;quot;: filesystem path to cache directory. Defaults: $TMPDIR/hugo_cache/ --canonifyURLs[=false]: if true, all relative URLs will be canonicalized using baseURL --config=&amp;quot;&amp;quot;: config file (default is path/config.</description>
    </item>
    
    <item>
      <title>hugo check ulimit</title>
      <link>https://www.gohugo.org/doc/commands/hugo_check_ulimit/</link>
      <pubDate>Wed, 25 Nov 2015 23:10:39 +0100</pubDate>
      
      <guid>https://www.gohugo.org/doc/commands/hugo_check_ulimit/</guid>
      <description>hugo check ulimit Check system ulimit settings
Synopsis Hugo will inspect the current ulimit settings on the system. This is primarily to ensure that Hugo can watch enough files on some OSs
hugo check ulimit  Options inherited from parent commands  -b, --baseURL=&amp;quot;&amp;quot;: hostname (and path) to the root, e.g. http://spf13.com/ -D, --buildDrafts[=false]: include content marked as draft -F, --buildFuture[=false]: include content with publishdate in the future --cacheDir=&amp;quot;&amp;quot;: filesystem path to cache directory.</description>
    </item>
    
    <item>
      <title>hugo config</title>
      <link>https://www.gohugo.org/doc/commands/hugo_config/</link>
      <pubDate>Wed, 25 Nov 2015 23:10:39 +0100</pubDate>
      
      <guid>https://www.gohugo.org/doc/commands/hugo_config/</guid>
      <description>hugo config Print the site configuration
Synopsis Print the site configuration, both default and custom settings.
hugo config  Options inherited from parent commands  -b, --baseURL=&amp;quot;&amp;quot;: hostname (and path) to the root, e.g. http://spf13.com/ -D, --buildDrafts[=false]: include content marked as draft -F, --buildFuture[=false]: include content with publishdate in the future --cacheDir=&amp;quot;&amp;quot;: filesystem path to cache directory. Defaults: $TMPDIR/hugo_cache/ --canonifyURLs[=false]: if true, all relative URLs will be canonicalized using baseURL --config=&amp;quot;&amp;quot;: config file (default is path/config.</description>
    </item>
    
    <item>
      <title>hugo convert</title>
      <link>https://www.gohugo.org/doc/commands/hugo_convert/</link>
      <pubDate>Wed, 25 Nov 2015 23:10:39 +0100</pubDate>
      
      <guid>https://www.gohugo.org/doc/commands/hugo_convert/</guid>
      <description>hugo convert Convert your content to different formats
Synopsis Convert your content (e.g. front matter) to different formats.
See convert&amp;rsquo;s subcommands toJSON, toTOML and toYAML for more information.
Options  -o, --output=&amp;quot;&amp;quot;: filesystem path to write files to --unsafe[=false]: enable less safe operations, please backup first  Options inherited from parent commands  -b, --baseURL=&amp;quot;&amp;quot;: hostname (and path) to the root, e.g. http://spf13.com/ -D, --buildDrafts[=false]: include content marked as draft -F, --buildFuture[=false]: include content with publishdate in the future --cacheDir=&amp;quot;&amp;quot;: filesystem path to cache directory.</description>
    </item>
    
    <item>
      <title>hugo convert toJSON</title>
      <link>https://www.gohugo.org/doc/commands/hugo_convert_tojson/</link>
      <pubDate>Wed, 25 Nov 2015 23:10:39 +0100</pubDate>
      
      <guid>https://www.gohugo.org/doc/commands/hugo_convert_tojson/</guid>
      <description>hugo convert toJSON Convert front matter to JSON
Synopsis toJSON converts all front matter in the content directory to use JSON for the front matter.
hugo convert toJSON  Options inherited from parent commands  -b, --baseURL=&amp;quot;&amp;quot;: hostname (and path) to the root, e.g. http://spf13.com/ -D, --buildDrafts[=false]: include content marked as draft -F, --buildFuture[=false]: include content with publishdate in the future --cacheDir=&amp;quot;&amp;quot;: filesystem path to cache directory. Defaults: $TMPDIR/hugo_cache/ --canonifyURLs[=false]: if true, all relative URLs will be canonicalized using baseURL --config=&amp;quot;&amp;quot;: config file (default is path/config.</description>
    </item>
    
    <item>
      <title>hugo convert toTOML</title>
      <link>https://www.gohugo.org/doc/commands/hugo_convert_totoml/</link>
      <pubDate>Wed, 25 Nov 2015 23:10:39 +0100</pubDate>
      
      <guid>https://www.gohugo.org/doc/commands/hugo_convert_totoml/</guid>
      <description>hugo convert toTOML Convert front matter to TOML
Synopsis toTOML converts all front matter in the content directory to use TOML for the front matter.
hugo convert toTOML  Options inherited from parent commands  -b, --baseURL=&amp;quot;&amp;quot;: hostname (and path) to the root, e.g. http://spf13.com/ -D, --buildDrafts[=false]: include content marked as draft -F, --buildFuture[=false]: include content with publishdate in the future --cacheDir=&amp;quot;&amp;quot;: filesystem path to cache directory. Defaults: $TMPDIR/hugo_cache/ --canonifyURLs[=false]: if true, all relative URLs will be canonicalized using baseURL --config=&amp;quot;&amp;quot;: config file (default is path/config.</description>
    </item>
    
    <item>
      <title>hugo convert toYAML</title>
      <link>https://www.gohugo.org/doc/commands/hugo_convert_toyaml/</link>
      <pubDate>Wed, 25 Nov 2015 23:10:39 +0100</pubDate>
      
      <guid>https://www.gohugo.org/doc/commands/hugo_convert_toyaml/</guid>
      <description>hugo convert toYAML Convert front matter to YAML
Synopsis toYAML converts all front matter in the content directory to use YAML for the front matter.
hugo convert toYAML  Options inherited from parent commands  -b, --baseURL=&amp;quot;&amp;quot;: hostname (and path) to the root, e.g. http://spf13.com/ -D, --buildDrafts[=false]: include content marked as draft -F, --buildFuture[=false]: include content with publishdate in the future --cacheDir=&amp;quot;&amp;quot;: filesystem path to cache directory. Defaults: $TMPDIR/hugo_cache/ --canonifyURLs[=false]: if true, all relative URLs will be canonicalized using baseURL --config=&amp;quot;&amp;quot;: config file (default is path/config.</description>
    </item>
    
    <item>
      <title>hugo gen</title>
      <link>https://www.gohugo.org/doc/commands/hugo_gen/</link>
      <pubDate>Wed, 25 Nov 2015 23:10:39 +0100</pubDate>
      
      <guid>https://www.gohugo.org/doc/commands/hugo_gen/</guid>
      <description>hugo gen A collection of several useful generators.
Synopsis A collection of several useful generators.
Options inherited from parent commands  -b, --baseURL=&amp;quot;&amp;quot;: hostname (and path) to the root, e.g. http://spf13.com/ -D, --buildDrafts[=false]: include content marked as draft -F, --buildFuture[=false]: include content with publishdate in the future --cacheDir=&amp;quot;&amp;quot;: filesystem path to cache directory. Defaults: $TMPDIR/hugo_cache/ --canonifyURLs[=false]: if true, all relative URLs will be canonicalized using baseURL --config=&amp;quot;&amp;quot;: config file (default is path/config.</description>
    </item>
    
    <item>
      <title>hugo gen autocomplete</title>
      <link>https://www.gohugo.org/doc/commands/hugo_gen_autocomplete/</link>
      <pubDate>Wed, 25 Nov 2015 23:10:39 +0100</pubDate>
      
      <guid>https://www.gohugo.org/doc/commands/hugo_gen_autocomplete/</guid>
      <description>hugo gen autocomplete Generate shell autocompletion script for Hugo
Synopsis Generates a shell autocompletion script for Hugo.
NOTE: The current version supports Bash only. This should work for *nix systems with Bash installed.
By default, the file is written directly to /etc/bash_completion.d for convenience, and the command may need superuser rights, e.g.:
$ sudo hugo genautocomplete  Add --completionfile=/path/to/file flag to set alternative file-path and name.
Logout and in again to reload the completion scripts, or just source them in directly:</description>
    </item>
    
    <item>
      <title>hugo gen doc</title>
      <link>https://www.gohugo.org/doc/commands/hugo_gen_doc/</link>
      <pubDate>Wed, 25 Nov 2015 23:10:39 +0100</pubDate>
      
      <guid>https://www.gohugo.org/doc/commands/hugo_gen_doc/</guid>
      <description>hugo gen doc Generate Markdown documentation for the Hugo CLI.
Synopsis Generate Markdown documentation for the Hugo CLI.
This command is, mostly, used to create up-to-date documentation of Hugo&amp;rsquo;s command-line interface for http://gohugo.io/.
It creates one Markdown file per command with front matter suitable for rendering in Hugo.
hugo gen doc  Options  --dir=&amp;quot;/tmp/hugodoc/&amp;quot;: the directory to write the doc.  Options inherited from parent commands  -b, --baseURL=&amp;quot;&amp;quot;: hostname (and path) to the root, e.</description>
    </item>
    
    <item>
      <title>hugo gen man</title>
      <link>https://www.gohugo.org/doc/commands/hugo_gen_man/</link>
      <pubDate>Wed, 25 Nov 2015 23:10:39 +0100</pubDate>
      
      <guid>https://www.gohugo.org/doc/commands/hugo_gen_man/</guid>
      <description>hugo gen man Generate man pages for the Hugo CLI
Synopsis This command automatically generates up-to-date man pages of Hugo&amp;rsquo;s command-line interface. By default, it creates the man page files in the &amp;ldquo;man&amp;rdquo; directory under the current directory.
hugo gen man  Options inherited from parent commands  -b, --baseURL=&amp;quot;&amp;quot;: hostname (and path) to the root, e.g. http://spf13.com/ -D, --buildDrafts[=false]: include content marked as draft -F, --buildFuture[=false]: include content with publishdate in the future --cacheDir=&amp;quot;&amp;quot;: filesystem path to cache directory.</description>
    </item>
    
    <item>
      <title>hugo import</title>
      <link>https://www.gohugo.org/doc/commands/hugo_import/</link>
      <pubDate>Wed, 25 Nov 2015 23:10:39 +0100</pubDate>
      
      <guid>https://www.gohugo.org/doc/commands/hugo_import/</guid>
      <description>hugo import Import your site from others.
Synopsis Import your site from other web site generators like Jekyll.
Import requires a subcommand, e.g. hugo import jekyll jekyll_root_path target_path.
Options inherited from parent commands  -b, --baseURL=&amp;quot;&amp;quot;: hostname (and path) to the root, e.g. http://spf13.com/ -D, --buildDrafts[=false]: include content marked as draft -F, --buildFuture[=false]: include content with publishdate in the future --cacheDir=&amp;quot;&amp;quot;: filesystem path to cache directory. Defaults: $TMPDIR/hugo_cache/ --canonifyURLs[=false]: if true, all relative URLs will be canonicalized using baseURL --config=&amp;quot;&amp;quot;: config file (default is path/config.</description>
    </item>
    
    <item>
      <title>hugo import jekyll</title>
      <link>https://www.gohugo.org/doc/commands/hugo_import_jekyll/</link>
      <pubDate>Wed, 25 Nov 2015 23:10:39 +0100</pubDate>
      
      <guid>https://www.gohugo.org/doc/commands/hugo_import_jekyll/</guid>
      <description>hugo import jekyll hugo import from Jekyll
Synopsis hugo import from Jekyll.
Import from Jekyll requires two paths, e.g. hugo import jekyll jekyll_root_path target_path.
hugo import jekyll  Options inherited from parent commands  -b, --baseURL=&amp;quot;&amp;quot;: hostname (and path) to the root, e.g. http://spf13.com/ -D, --buildDrafts[=false]: include content marked as draft -F, --buildFuture[=false]: include content with publishdate in the future --cacheDir=&amp;quot;&amp;quot;: filesystem path to cache directory. Defaults: $TMPDIR/hugo_cache/ --canonifyURLs[=false]: if true, all relative URLs will be canonicalized using baseURL --config=&amp;quot;&amp;quot;: config file (default is path/config.</description>
    </item>
    
    <item>
      <title>hugo list</title>
      <link>https://www.gohugo.org/doc/commands/hugo_list/</link>
      <pubDate>Wed, 25 Nov 2015 23:10:39 +0100</pubDate>
      
      <guid>https://www.gohugo.org/doc/commands/hugo_list/</guid>
      <description>hugo list Listing out various types of content
Synopsis Listing out various types of content.
List requires a subcommand, e.g. hugo list drafts.
Options inherited from parent commands  -b, --baseURL=&amp;quot;&amp;quot;: hostname (and path) to the root, e.g. http://spf13.com/ -D, --buildDrafts[=false]: include content marked as draft -F, --buildFuture[=false]: include content with publishdate in the future --cacheDir=&amp;quot;&amp;quot;: filesystem path to cache directory. Defaults: $TMPDIR/hugo_cache/ --canonifyURLs[=false]: if true, all relative URLs will be canonicalized using baseURL --config=&amp;quot;&amp;quot;: config file (default is path/config.</description>
    </item>
    
    <item>
      <title>hugo list drafts</title>
      <link>https://www.gohugo.org/doc/commands/hugo_list_drafts/</link>
      <pubDate>Wed, 25 Nov 2015 23:10:39 +0100</pubDate>
      
      <guid>https://www.gohugo.org/doc/commands/hugo_list_drafts/</guid>
      <description>hugo list drafts List all drafts
Synopsis List all of the drafts in your content directory.
hugo list drafts  Options inherited from parent commands  -b, --baseURL=&amp;quot;&amp;quot;: hostname (and path) to the root, e.g. http://spf13.com/ -D, --buildDrafts[=false]: include content marked as draft -F, --buildFuture[=false]: include content with publishdate in the future --cacheDir=&amp;quot;&amp;quot;: filesystem path to cache directory. Defaults: $TMPDIR/hugo_cache/ --canonifyURLs[=false]: if true, all relative URLs will be canonicalized using baseURL --config=&amp;quot;&amp;quot;: config file (default is path/config.</description>
    </item>
    
    <item>
      <title>hugo list future</title>
      <link>https://www.gohugo.org/doc/commands/hugo_list_future/</link>
      <pubDate>Wed, 25 Nov 2015 23:10:39 +0100</pubDate>
      
      <guid>https://www.gohugo.org/doc/commands/hugo_list_future/</guid>
      <description>hugo list future List all posts dated in the future
Synopsis List all of the posts in your content directory which will be posted in the future.
hugo list future  Options inherited from parent commands  -b, --baseURL=&amp;quot;&amp;quot;: hostname (and path) to the root, e.g. http://spf13.com/ -D, --buildDrafts[=false]: include content marked as draft -F, --buildFuture[=false]: include content with publishdate in the future --cacheDir=&amp;quot;&amp;quot;: filesystem path to cache directory. Defaults: $TMPDIR/hugo_cache/ --canonifyURLs[=false]: if true, all relative URLs will be canonicalized using baseURL --config=&amp;quot;&amp;quot;: config file (default is path/config.</description>
    </item>
    
    <item>
      <title>hugo new</title>
      <link>https://www.gohugo.org/doc/commands/hugo_new/</link>
      <pubDate>Wed, 25 Nov 2015 23:10:39 +0100</pubDate>
      
      <guid>https://www.gohugo.org/doc/commands/hugo_new/</guid>
      <description>hugo new Create new content for your site
Synopsis Create a new content file and automatically set the date and title. It will guess which kind of file to create based on the path provided.
You can also specify the kind with -k KIND.
If archetypes are provided in your theme or site, they will be used.
hugo new [path]  Options  -f, --format=&amp;quot;toml&amp;quot;: frontmatter format -k, --kind=&amp;quot;&amp;quot;: Content type to create  Options inherited from parent commands  -b, --baseURL=&amp;quot;&amp;quot;: hostname (and path) to the root, e.</description>
    </item>
    
    <item>
      <title>hugo new site</title>
      <link>https://www.gohugo.org/doc/commands/hugo_new_site/</link>
      <pubDate>Wed, 25 Nov 2015 23:10:39 +0100</pubDate>
      
      <guid>https://www.gohugo.org/doc/commands/hugo_new_site/</guid>
      <description>hugo new site Create a new site (skeleton)
Synopsis Create a new site in the provided directory. The new site will have the correct structure, but no content or theme yet. Use hugo new [contentPath] to create new content.
hugo new site [path]  Options  --force[=false]: Init inside non-empty directory -f, --format=&amp;quot;toml&amp;quot;: config &amp;amp; frontmatter format  Options inherited from parent commands  -b, --baseURL=&amp;quot;&amp;quot;: hostname (and path) to the root, e.</description>
    </item>
    
    <item>
      <title>hugo new theme</title>
      <link>https://www.gohugo.org/doc/commands/hugo_new_theme/</link>
      <pubDate>Wed, 25 Nov 2015 23:10:39 +0100</pubDate>
      
      <guid>https://www.gohugo.org/doc/commands/hugo_new_theme/</guid>
      <description>hugo new theme Create a new theme
Synopsis Create a new theme (skeleton) called [name] in the current directory. New theme is a skeleton. Please add content to the touched files. Add your name to the copyright line in the license and adjust the theme.toml file as you see fit.
hugo new theme [name]  Options inherited from parent commands  -b, --baseURL=&amp;quot;&amp;quot;: hostname (and path) to the root, e.</description>
    </item>
    
    <item>
      <title>hugo server</title>
      <link>https://www.gohugo.org/doc/commands/hugo_server/</link>
      <pubDate>Wed, 25 Nov 2015 23:10:39 +0100</pubDate>
      
      <guid>https://www.gohugo.org/doc/commands/hugo_server/</guid>
      <description>hugo server A high performance webserver
Synopsis Hugo provides its own webserver which builds and serves the site. While hugo server is high performance, it is a webserver with limited options. Many run it in production, but the standard behavior is for people to use it in development and use a more full featured server such as Nginx or Caddy.
&amp;lsquo;hugo server&amp;rsquo; will avoid writing the rendered and served content to disk, preferring to store it in memory.</description>
    </item>
    
    <item>
      <title>hugo undraft</title>
      <link>https://www.gohugo.org/doc/commands/hugo_undraft/</link>
      <pubDate>Wed, 25 Nov 2015 23:10:39 +0100</pubDate>
      
      <guid>https://www.gohugo.org/doc/commands/hugo_undraft/</guid>
      <description>hugo undraft Undraft changes the content&amp;rsquo;s draft status from &amp;lsquo;True&amp;rsquo; to &amp;lsquo;False&amp;rsquo;
Synopsis Undraft changes the content&amp;rsquo;s draft status from &amp;lsquo;True&amp;rsquo; to &amp;lsquo;False&amp;rsquo; and updates the date to the current date and time. If the content&amp;rsquo;s draft status is &amp;lsquo;False&amp;rsquo;, nothing is done.
hugo undraft path/to/content  Options inherited from parent commands  -b, --baseURL=&amp;quot;&amp;quot;: hostname (and path) to the root, e.g. http://spf13.com/ -D, --buildDrafts[=false]: include content marked as draft -F, --buildFuture[=false]: include content with publishdate in the future --cacheDir=&amp;quot;&amp;quot;: filesystem path to cache directory.</description>
    </item>
    
    <item>
      <title>hugo version</title>
      <link>https://www.gohugo.org/doc/commands/hugo_version/</link>
      <pubDate>Wed, 25 Nov 2015 23:10:39 +0100</pubDate>
      
      <guid>https://www.gohugo.org/doc/commands/hugo_version/</guid>
      <description>hugo version Print the version number of Hugo
Synopsis All software has versions. This is Hugo&amp;rsquo;s.
hugo version  Options inherited from parent commands  -b, --baseURL=&amp;quot;&amp;quot;: hostname (and path) to the root, e.g. http://spf13.com/ -D, --buildDrafts[=false]: include content marked as draft -F, --buildFuture[=false]: include content with publishdate in the future --cacheDir=&amp;quot;&amp;quot;: filesystem path to cache directory. Defaults: $TMPDIR/hugo_cache/ --canonifyURLs[=false]: if true, all relative URLs will be canonicalized using baseURL --config=&amp;quot;&amp;quot;: config file (default is path/config.</description>
    </item>
    
  </channel>
</rss>